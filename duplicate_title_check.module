<?php

use Drupal\Core\Entity\ContentEntityConfirmFormBase;
use Drupal\Core\Entity\ContentEntityFormInterface;
use Drupal\Core\Form\FormStateInterface;

/* ============================================================
 * Utilities
 * ============================================================ */

/**
 * Is duplicate-title checking enabled for this bundle?
 *
 * Reads simple config: duplicate_title_check.settings: enabled_bundles (array).
 * - If the array is empty or missing => treat as ALL bundles enabled.
 */
function duplicate_title_check_is_enabled_for_bundle(string $bundle): bool {
  $config = \Drupal::config('duplicate_title_check.settings');
  $enabled = $config->get('enabled_bundles');
  if (empty($enabled) || !is_array($enabled)) {
    return TRUE; // default: enabled for all types when none explicitly selected
  }
  return in_array($bundle, $enabled, TRUE);
}

/**
 * Do we have a published duplicate of the given title (excluding current nid)?
 */
function _duplicate_title_check_has_published_dupe(string $title, int $exclude_nid = 0): bool {
  if ($title === '') {
    return FALSE;
  }
  return (bool) \Drupal::entityQuery('node')
    ->condition('title', $title)
    ->condition('nid', $exclude_nid, '!=')
    ->condition('status', 1)   // published only
    ->range(0, 1)              // LIMIT 1 for performance
    ->accessCheck(TRUE)        // respect permissions; no info leakage
    ->execute();
}

/* ============================================================
 * Theme hook (twig for warning)
 * ============================================================ */

/**
 * Implements hook_theme().
 */
function duplicate_title_check_theme() {
  return [
    'duplicate_title_check_warning' => [
      'variables' => ['message' => NULL],
      'template'  => 'duplicate-title-check-warning',
    ],
  ];
}

/* ============================================================
 * Node add/edit form: inject UI under Title + validate
 * ============================================================ */

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node forms (add/edit only).
 */
function duplicate_title_check_form_node_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $form_object = $form_state->getFormObject();

  // Only add/edit entity forms; skip confirm/delete flows.
  if (!$form_object instanceof ContentEntityFormInterface || $form_object instanceof ContentEntityConfirmFormBase) {
    return;
  }

  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_object->getEntity();

  // Respect per-bundle enablement.
  if (!duplicate_title_check_is_enabled_for_bundle($node->bundle())) {
    return;
  }

  // Identify Title shape (textfield vs Field API widget).
  $title_is_textfield = isset($form['title']['#type']) && $form['title']['#type'] === 'textfield';
  $title_is_widget    = isset($form['title']['widget'][0]['value']);

  if (!$title_is_textfield && !$title_is_widget) {
    // Title not in a standard place; still attach validator.
    if (!in_array('duplicate_title_check_node_form_validate', $form['#validate'] ?? [], TRUE)) {
      $form['#validate'][] = 'duplicate_title_check_node_form_validate';
    }
    return;
  }

  // Insert a container inside the Title wrapper (under help + preview).
  if ($title_is_widget) {
    $ui_parent  =& $form['title']['widget'][0];
    $title_input =& $form['title']['widget'][0]['value'];
  }
  else {
    $ui_parent  =& $form['title'];
    $title_input =& $form['title'];
  }

  if (!isset($ui_parent['duplicate_title_ui'])) {
    $ui_parent['duplicate_title_ui'] = [
      '#type'   => 'container',
      '#access' => FALSE,   // revealed when a duplicate is detected
      '#weight' => 100,     // after description + preview
    ];

    // Acknowledgement checkbox (store at root with #parents).
    $ui_parent['duplicate_title_ui']['duplicate_title_check'] = [
      '#type' => 'checkbox',
      '#title' => t('A piece of content with this title already exists. Keep the same title anyway?'),
      '#description' => t('Selecting this will save your content with a duplicate title. Consider revising the title for clarity and SEO.'),
      '#parents' => ['duplicate_title_check'],
      '#default_value' => (int) $form_state->getValue('duplicate_title_check', 0),
      '#weight' => 1,
    ];
  }

  // Decide whether to show warning + checkbox on this build.
  $show_ui = (bool) $form_state->get('show_duplicate_checkbox');
  $user_input = $form_state->getUserInput();
  if (isset($user_input['duplicate_title_check']) && (string) $user_input['duplicate_title_check'] === '1') {
    // Keep visible when user has just checked it so value isn't dropped.
    $show_ui = TRUE;
  }

  if ($show_ui) {
    // Themed warning (Drupal messages styling with icon + "Warning").
    $ui_parent['duplicate_title_ui']['warning'] = [
      '#theme' => 'duplicate_title_check_warning',
      '#message' => t('A published item with this title already exists. You can keep the same title, or change it for clarity.'),
      '#weight' => -10,
    ];
    $ui_parent['duplicate_title_ui']['#access'] = TRUE;

    // Optional: yellow border on Title.
    $form['#attached']['library'][] = 'duplicate_title_check/admin';
    $title_input['#attributes']['class'][] = 'duplicate-title-warning';
  }
  else {
    $ui_parent['duplicate_title_ui']['#access'] = FALSE;
  }

  // Ensure our validator runs once.
  if (!in_array('duplicate_title_check_node_form_validate', $form['#validate'] ?? [], TRUE)) {
    $form['#validate'][] = 'duplicate_title_check_node_form_validate';
  }
}

/**
 * Node form validator (single DB query; warning-only UX).
 *
 * Flow:
 *  - Duplicate AND checkbox NOT ticked → set flag + setRebuild(TRUE) to show UI.
 *  - Duplicate AND checkbox ticked     → allow save (NO rebuild).
 *  - No duplicate                      → clear flag (no UI).
 */
function duplicate_title_check_node_form_validate(array &$form, FormStateInterface $form_state) {
  $form_object = $form_state->getFormObject();
  if (!$form_object instanceof ContentEntityFormInterface || $form_object instanceof ContentEntityConfirmFormBase) {
    return;
  }

  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_object->getEntity();

  if (!duplicate_title_check_is_enabled_for_bundle($node->bundle())) {
    $form_state->set('show_duplicate_checkbox', FALSE);
    return;
  }

  // Read Title safely across shapes.
  $title_input = $form_state->getValue('title');
  if (is_array($title_input) && isset($title_input[0]['value'])) {
    $title = trim((string) $title_input[0]['value']);
  }
  elseif (is_string($title_input)) {
    $title = trim($title_input);
  }
  else {
    $title = trim((string) $node->label());
  }

  if ($title === '') {
    $form_state->set('show_duplicate_checkbox', FALSE);
    return;
  }

  $duplicate_exists = _duplicate_title_check_has_published_dupe($title, (int) $node->id());
  $ack = (bool) $form_state->getValue('duplicate_title_check');

  if ($duplicate_exists) {
    if ($ack) {
      // Acknowledged → proceed; do not rebuild (so the save continues).
      $form_state->set('show_duplicate_checkbox', FALSE);
      return;
    }
    // Not acknowledged → show UI and rebuild this round.
    $form_state->set('show_duplicate_checkbox', TRUE);
    $form_state->setRebuild(TRUE);
  }
  else {
    // No duplicate → hide UI.
    $form_state->set('show_duplicate_checkbox', FALSE);
  }
}
