<?php

use Drupal\Core\Entity\ContentEntityConfirmFormBase;
use Drupal\Core\Entity\ContentEntityFormInterface;
use Drupal\Core\Form\FormStateInterface;

/* ============================================================
 * CONFIG HELPERS
 * ============================================================ */

/**
 * Is duplicate-title checking enabled for this bundle?
 * Reads duplicate_title_check.settings: enabled_bundles (array).
 * - If empty/missing => treat as ALL bundles enabled.
 */
function duplicate_title_check_is_enabled_for_bundle(string $bundle): bool {
  $config = \Drupal::config('duplicate_title_check.settings');
  $enabled = $config->get('enabled_bundles');
  if (empty($enabled) || !is_array($enabled)) {
    return TRUE; // default: enabled for all types
  }
  return in_array($bundle, $enabled, TRUE);
}

/* ============================================================
 * DISCOVERY / RENDER HELPERS
 * ============================================================ */

/**
 * Find Title input and its parent wrapper in a robust, theme-agnostic way.
 *
 * Returns:
 *   [
 *     'found' => bool,
 *     'input' => &array (ref to the Title input element),
 *     'parent' => &array (ref to the wrapper where warning+checkbox should go),
 *     'shape' => 'widget'|'textfield'|'missing'
 *   ]
 */
function _duplicate_title_check_locate_title(array &$form): array {
  // 1) Field API widget (most common): ['title']['widget'][0]['value']
  if (isset($form['title']['widget'][0]['value'])) {
    return [
      'found'  => TRUE,
      'input'  => &$form['title']['widget'][0]['value'],
      'parent' => &$form['title']['widget'][0],
      'shape'  => 'widget',
    ];
  }

  // 2) Plain textfield (some custom forms / overrides): ['title']['#type'] === 'textfield'
  if (isset($form['title']) && ($form['title']['#type'] ?? NULL) === 'textfield') {
    return [
      'found'  => TRUE,
      'input'  => &$form['title'],
      'parent' => &$form['title'], // we will inject a sibling container via form reordering fallback below
      'shape'  => 'textfield',
    ];
  }

  // 3) Missing entirely — return a sentinel so we can render at top of form.
  return [
    'found'  => FALSE,
    // Dummy refs (unused); keep structure consistent.
    'input'  => $form,
    'parent' => $form,
    'shape'  => 'missing',
  ];
}

/**
 * Create (if needed) and return a UI container *under Title* or *top of form*.
 *
 * When shape = 'widget': inject inside the widget wrapper (after help/preview).
 * When shape = 'textfield': we inject a sibling container right after Title by
 *                           a small reordering trick.
 * When shape = 'missing': we inject a global container at top of the form.
 *
 * Returns: &array reference to the UI container element.
 */
function &_duplicate_title_check_ensure_ui_container(array &$form, array &$parent, string $shape) {
  if ($shape === 'missing') {
    // Global, top-of-form container (put it first).
    if (!isset($form['duplicate_title_global_ui'])) {
      $form = ['duplicate_title_global_ui' => [
        '#type' => 'container',
        '#access' => FALSE,
        '#weight' => -1000, // very top
      ]] + $form;
    }
    return $form['duplicate_title_global_ui'];
  }

  if ($shape === 'textfield') {
    // Ensure a sibling container just after Title.
    if (!isset($form['_dtc_tf_reordered'])) {
      $title = $form['title'];
      unset($form['title']);
      $form = [
        'title' => $title,
        'duplicate_title_tf_ui' => [
          '#type' => 'container',
          '#access' => FALSE,
          '#weight' => 0.05, // just under Title in most themes
        ],
      ] + $form;
      $form['_dtc_tf_reordered'] = ['#type' => 'value', '#value' => TRUE];
    }
    return $form['duplicate_title_tf_ui'];
  }

  // Default: widget case; we inject directly inside the widget wrapper.
  if (!isset($parent['duplicate_title_ui'])) {
    $parent['duplicate_title_ui'] = [
      '#type'   => 'container',
      '#access' => FALSE,
      '#weight' => 100, // ensure after description + preview
    ];
  }
  return $parent['duplicate_title_ui'];
}

/* ============================================================
 * QUERY HELPERS
 * ============================================================ */

/**
 * Do we have a published duplicate of the given title (excluding current nid)?
 */
function _duplicate_title_check_has_published_dupe(string $title, int $exclude_nid = 0): bool {
  if ($title === '') {
    return FALSE;
  }
  return (bool) \Drupal::entityQuery('node')
    ->condition('title', $title)
    ->condition('nid', $exclude_nid, '!=')
    ->condition('status', 1)   // published only
    ->range(0, 1)              // LIMIT 1
    ->accessCheck(TRUE)        // respect permissions; no info leakage
    ->execute();
}

/* ============================================================
 * THEME HOOK
 * ============================================================ */

/**
 * Implements hook_theme().
 */
function duplicate_title_check_theme() {
  return [
    'duplicate_title_check_warning' => [
      'variables' => ['message' => NULL],
      'template'  => 'duplicate-title-check-warning', // uses your twig
    ],
  ];
}

/* ============================================================
 * NODE FORM ALTER
 * ============================================================ */

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node forms (add/edit).
 * We never run on confirm/delete forms.
 */
function duplicate_title_check_form_node_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $form_object = $form_state->getFormObject();
  if (!$form_object instanceof ContentEntityFormInterface || $form_object instanceof ContentEntityConfirmFormBase) {
    return;
  }

  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_object->getEntity();
  if (!duplicate_title_check_is_enabled_for_bundle($node->bundle())) {
    return;
  }

  // Locate Title and pick the correct parent to render under (or fall back to top).
  $loc = _duplicate_title_check_locate_title($form);
  $ui  = _duplicate_title_check_ensure_ui_container($form, $loc['parent'], $loc['shape']);

  // Always add the checkbox to our container (value saved at root via #parents).
  if (!isset($ui['duplicate_title_check'])) {
    $ui['duplicate_title_check'] = [
      '#type' => 'checkbox',
      '#title' => t('A piece of content with this title already exists. Keep the same title anyway?'),
      '#description' => t('Selecting this will save your content with a duplicate title. Consider revising the title for clarity and SEO.'),
      '#parents' => ['duplicate_title_check'],
      '#default_value' => (int) $form_state->getValue('duplicate_title_check', 0),
      '#weight' => 1,
    ];
  }

  // Show UI on this build?
  $show_ui = (bool) $form_state->get('show_duplicate_checkbox');
  $user_input = $form_state->getUserInput();
  if (isset($user_input['duplicate_title_check']) && (string) $user_input['duplicate_title_check'] === '1') {
    $show_ui = TRUE; // keep visible if user just checked it so value isn't dropped
  }

  if ($show_ui) {
    // Themed Drupal warning (icon + “Warning”); will appear under Title
    // or at top of the form for the 'missing' shape.
    $ui['warning'] = [
      '#theme' => 'duplicate_title_check_warning',
      '#message' => t('A published item with this title already exists. You can keep the same title, or change it for clarity.'),
      '#weight' => -10,
    ];
    $ui['#access'] = TRUE;

    // Optional yellow border on Title input (only when we actually found it).
    if ($loc['found']) {
      $form['#attached']['library'][] = 'duplicate_title_check/admin';
      $loc['input']['#attributes']['class'][] = 'duplicate-title-warning';
    }
  }
  else {
    $ui['#access'] = FALSE;
  }

  // Ensure our validator runs once.
  if (!in_array('duplicate_title_check_node_form_validate', $form['#validate'] ?? [], TRUE)) {
    $form['#validate'][] = 'duplicate_title_check_node_form_validate';
  }
}

/* ============================================================
 * VALIDATOR
 * ============================================================ */

/**
 * Node form validator (single DB query; warning-only UX with ack path).
 *
 * Flow:
 *  - Duplicate AND checkbox NOT ticked → set flag + setRebuild(TRUE) to show UI.
 *  - Duplicate AND checkbox ticked     → allow save (NO rebuild).
 *  - No duplicate                      → clear flag (no UI).
 */
function duplicate_title_check_node_form_validate(array &$form, FormStateInterface $form_state) {
  $form_object = $form_state->getFormObject();
  if (!$form_object instanceof ContentEntityFormInterface || $form_object instanceof ContentEntityConfirmFormBase) {
    return;
  }

  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_object->getEntity();
  if (!duplicate_title_check_is_enabled_for_bundle($node->bundle())) {
    $form_state->set('show_duplicate_checkbox', FALSE);
    return;
  }

  // Read Title robustly from form_state first (covers widget/textfield/missing).
  $title_input = $form_state->getValue('title');
  if (is_array($title_input) && isset($title_input[0]['value'])) {
    $title = trim((string) $title_input[0]['value']);
  }
  elseif (is_string($title_input)) {
    $title = trim($title_input);
  }
  else {
    // Fallback: use the entity label (may be blank on "Add" forms before save).
    $title = trim((string) $node->label());
  }

  // If absolutely no title is available, still clear UI and continue.
  if ($title === '') {
    $form_state->set('show_duplicate_checkbox', FALSE);
    return;
  }

  $duplicate_exists = _duplicate_title_check_has_published_dupe($title, (int) $node->id());
  $ack = (bool) $form_state->getValue('duplicate_title_check');

  if ($duplicate_exists) {
    if ($ack) {
      // Acknowledged → proceed; DO NOT rebuild (so the save continues).
      $form_state->set('show_duplicate_checkbox', FALSE);
      return;
    }
    // Not acknowledged → show UI this round; rebuild to render warning + checkbox.
    $form_state->set('show_duplicate_checkbox', TRUE);
    $form_state->setRebuild(TRUE);
  }
  else {
    // No duplicate → hide UI.
    $form_state->set('show_duplicate_checkbox', FALSE);
  }
}
